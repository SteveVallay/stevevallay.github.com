<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Zhibin's blog]]></title>
  <link href="http://SteveVallay.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://SteveVallay.github.io/"/>
  <updated>2014-05-24T00:14:32+08:00</updated>
  <id>http://SteveVallay.github.io/</id>
  <author>
    <name><![CDATA[zhibin]]></name>
    <email><![CDATA[zhibinwang.q@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[permissions on folder]]></title>
    <link href="http://SteveVallay.github.io/blog/2014/05/12/permissions-on-folder/"/>
    <updated>2014-05-12T21:46:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2014/05/12/permissions-on-folder</id>
    <content type="html"><![CDATA[<p>Never foget your dream, never ~</p>

<!--more-->


<p>对于一个文件来说，我们都知道，RWX 三个permission 分别对应读、写 和执行权限。但是对于目录来说，它又不能被执行，它的 X 权限有何用呢？如果没有 X 权限，是否可以修改目录中的文件呢？</p>

<p>让我们来实验一下：</p>

<p><code>bash
$ mkdir fz
$ ls -ld fz
drwxrwxr-x 2 goodluck goodluck 4096 2014-05-12 21:57 fz
</code>
创建成功，默认权限775</p>

<p>添加几个文件进来</p>

<p><code>bash
$ cd fz/
$ touch a b c
$ ls -al fz
drwxrwxr-x 2 goodluck goodluck 4096 2014-05-12 21:59 .
drwxr-xr-x 8 goodluck goodluck 4096 2014-05-12 21:59 ..
-rw-rw-r-- 1 goodluck goodluck    0 2014-05-12 21:59 a
-rw-rw-r-- 1 goodluck goodluck    0 2014-05-12 21:59 b
-rw-rw-r-- 1 goodluck goodluck    0 2014-05-12 21:59 c
</code>
让我们对fz单独设置 RWX 权限来看看是什么效果。</p>

<p>-R</p>

<p>```bash
$ sudo chmod 444 fz #修改 folder 的 permission 需要 root
$ ls -ld fz
dr&mdash;r&mdash;r&mdash; 2 goodluck goodluck 4096 2014-05-12 21:59 fz</p>

<p>$ ls -al fz
ls: cannot access fz/.: Permission denied
ls: cannot access fz/..: Permission denied
ls: cannot access fz/a: Permission denied
ls: cannot access fz/c: Permission denied
ls: cannot access fz/b: Permission denied
total 0
d????????? ? ? ? ?                ? .
d????????? ? ? ? ?                ? ..
&ndash;????????? ? ? ? ?                ? a
&ndash;????????? ? ? ? ?                ? b
&ndash;????????? ? ? ? ?                ? c
$ cat fz/a
cat: fz/a: Permission denied
$ cd fz
bash: cd: fz: Permission denied
```</p>

<p>只有 R 权限的话，只能知道 fz 里面有 . .. 两个目录和 a b c 三个文件。文件属性和文件的内容都不能读取，当然也不能写。</p>

<p>-W
```bash
$ sudo chmod 222 fz
$ ls -ld fz
d-w&mdash;w&mdash;w- 2 goodluck goodluck 4096 2014-05-12 21:59 fz</p>

<p>$ ls fz
ls: cannot open directory fz: Permission denied
$ cat fz/a
cat: fz/a: Permission denied
$ echo &ldquo;aaa&rdquo; >fz/a
bash: fz/a: Permission denied
mv fz/a fz/d
mv: accessing `fz/d': Permission denied
$ cd fz
bash: cd: fz: Permission denied
```
只有 W 权限,啥也干不了</p>

<p>-X
```bash
$ sudo chmod 111 fz
$ ls -ld fz
d&mdash;x&mdash;x&mdash;x 2 goodluck goodluck 4096 2014-05-12 21:59 fz</p>

<p>$ ls -al fz
ls: cannot open directory fz: Permission denied
$ echo &ldquo;aaa&rdquo; > fz/a  #success
$ cat fz/a
aaa
chmod +x fz/a #success
$ ls -l fz/a
-rw-rw-r&mdash; 1 goodluck goodluck 4 2014-05-12 22:16 fz/a
$ rm fz/a
rm: cannot remove <code>fz/a': Permission denied
$ cd fz
$ cd fz
$ ls
ls: cannot open directory .: Permission denied
$ touch ff
touch: cannot touch</code>ff': Permission denied</p>

<p>$ chmod 775 fz/a #fail but not prompt error
$ echo $?
0 #seems success but not changed
-rw-rw-r&mdash; 1 goodluck goodluck 11 2014-05-12 22:26 fz/a
```
只有X权限可以读，写,修改内部文件内容，修改内部文件属性，不能rename/delete/create 文件,chmod 没有报错，却也没有生效</p>

<p>-RX
<code>
$ sudo chmod 555 fz
$ ls -ld fz
dr-xr-xr-x 2 goodluck goodluck 4096 2014-05-12 22:19 fz
$ ls -al fz
total 12
dr-xr-xr-x 2 goodluck goodluck 4096 2014-05-12 22:19 .
drwxr-xr-x 8 goodluck goodluck 4096 2014-05-12 21:59 ..
-rw-rw-r-- 1 goodluck goodluck   11 2014-05-12 22:26 a
-rw-rw-r-- 1 goodluck goodluck    0 2014-05-12 21:59 b
-rw-rw-r-- 1 goodluck goodluck    0 2014-05-12 21:59 c
</code>
可以正常读、写、执行文件，cd 到目录，查看文件属性。不能 rename/delete/create 文件</p>

<p>奇怪的一点是在 cd 到 fz 可以使用 chmod 修改 a 文件的permisson, 但是在 fz 外面目录则不生效，奇怪!</p>

<p>-RW
```
$ sudo chmod 666 fz
$ ls -al fz
ls: cannot access fz/.: Permission denied
ls: cannot access fz/..: Permission denied
ls: cannot access fz/a: Permission denied
ls: cannot access fz/c: Permission denied
ls: cannot access fz/b: Permission denied
total 0
d????????? ? ? ? ?                ? .
d????????? ? ? ? ?                ? ..
&ndash;????????? ? ? ? ?                ? a
&ndash;????????? ? ? ? ?                ? b
&ndash;????????? ? ? ? ?                ? c</p>

<p>$ rm fz/a
rm: cannot remove <code>fz/a': Permission denied
$ touch fz/d
touch: cannot touch</code>fz/d': Permission denied
```</p>

<p>基本上和只有 R 权限一样，只能获取目录里面文件的文件名，不能读、不能写、不能执行、不能获取文件属性、不能 delete/rename/create 文件。</p>

<p>看得出来，没有 X 的 W 没有什么作用</p>

<p>-WX
<code>
$ sudo chmod 333 fz
$ ls -ld fz
d-wx-wx-wx 2 goodluck goodluck 4096 2014-05-12 22:19 fz
$ cat fz/a
echo aaa
$ ls -al fz/a
-rwxrwxrwx 1 goodluck goodluck 9 2014-05-12 22:38 fz/a
$ echo "bbb"&gt; fz/b
$ cat fz/b
bbb
$ rm fz/b #success
$ touch fz/e  #success
$ cd fz #success
</code></p>

<p>只是不能获取目录中的文件名列表，如果你已经知道某个文件的名字，那么则可以读、写、执行、获取属性、delete/rename/create 都没问题。</p>

<p>总结一下，linux 下，目录的权限属性：</p>

<ol>
<li>R 读取目录中包含的文件名和文件类型</li>
<li>W create/rename/delete 目录中的文件(仅在同时有 X 权限的时候生效)</li>
<li>X access/search 目录中的文件</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unlink]]></title>
    <link href="http://SteveVallay.github.io/blog/2014/04/28/unlink/"/>
    <updated>2014-04-28T22:23:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2014/04/28/unlink</id>
    <content type="html"><![CDATA[<p>Do the things you love more than yourself.</p>

<!--more-->


<p>继续 APUE 学习。</p>

<p>Linux 很多命令行命令和C标准库的很多接口有对应关系。pwd 命令对应 getcwd 接口，ls 命令对应 lstat 接口，rm 对应 remove 接口，link 对应 link 接口。。。。</p>

<p>有这么一个命令叫 unlink , 它对应的 C 库接口也叫 unlink.</p>

<p>man unlink 这么解释
unlink &ndash; call the unlink function to remove the specified file</p>

<p>man 2 unlink 接口 解释更清楚一点</p>

<p>unlink &ndash; delete a name and possibly the file it refers to</p>

<pre><code>   #include &lt;unistd.h&gt;

   int unlink(const char *pathname);
</code></pre>

<blockquote><p>unlink() deletes a name from the file system.  If that name was the last link to a file and no processes have the file open the file is deleted and the space it was using is made available for reuse.</p>

<p>If the name was the last link to a file but any processes still have the file open the file will remain in existence  until the last file descriptor referring to it is closed.</p>

<p>If the name referred to a symbolic link the link is removed.</p>

<p>If  the  name  referred to a socket, fifo or device the name for it is removed but processes which have the object open may continue to use it.</p></blockquote>

<p>unlink 从文件系统中删除一个名字，如果名字是文件的最后一个链接，则删除这个文件。这是什么意思呢，在linux 文件系统里，每个文件都是一个包含文件名的结构体，结构体并没有包含文件所包含的数据，而是有一个指针指向文件实际的存储位置。</p>

<p>删除文件的时候，首先要判断这个文件名（结构体）是否是文件的最后一个链接，如果是才把真正的文件内容删除。</p>

<p>如果 unlink 的时候，有进程打开了这个文件，那么直到所有的文件句柄关闭的时候才会删除。</p>

<p>如果文件是 symbolic link（软链接） 的话，unlink 会删除 link, 而不会影响 link 指向的文件。</p>

<p>如果是 socket, fifo,或 device,那么文件 name 被删除，如果有进程在打开，到进程关闭掉文件句柄时，才删除实际的存储内容。</p>

<p>unlink 的一个常见用法是：一个进程在运行的时候创建或者打开了一个文件，在进程异常退出的时候希望删除这个文件，那么打开这个文件之后就可以立马调用 unlink，进程在的时候文件不会被删除，到进程结束的时候文件会自动被删除。</p>
]]></content>
  </entry>
  
</feed>
