<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhibin's blog]]></title>
  <link href="http://SteveVallay.github.io/atom.xml" rel="self"/>
  <link href="http://SteveVallay.github.io/"/>
  <updated>2013-11-06T17:55:55+08:00</updated>
  <id>http://SteveVallay.github.io/</id>
  <author>
    <name><![CDATA[zhibin]]></name>
    <email><![CDATA[zhibinwang.q@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Disqus 评论]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/11/06/using-disqus-api/"/>
    <updated>2013-11-06T16:59:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/11/06/using-disqus-api</id>
    <content type="html"><![CDATA[<p>想给自己的 <a href="https://github.com/SteveVallay/rshare">Rails app</a> 添加评论功能，之前在使用 <a href="http://octopress.org/">Octopress</a> 的时候，接触到了 <a href="http://disqus.com/">Disqus</a> 这个专门做 Comments 的平台，许多的 blog 都使用 <a href="http://disqus.com/">Disqus</a> 作为它们的评论插件。所以决定使用 <a href="http://disqus.com/">Disqus</a> 的 api.</p>

<!-- more -->


<h3>帐号</h3>

<p>首先，需要现有 <a href="https://github.com/SteveVallay/rshare">Disqus</a> 的帐号， 没有的话就 <a href="https://disqus.com/profile/signup/">注册</a> 一个吧。</p>

<h3>Add Disqus to your site</h3>

<p>登录之后，找到 <a href="http://disqus.com/admin/create/">Add Disqus to your site</a>, 创建一个新的 site profile ,
简单的填写完 site name, admin url, category ，点击  Finish registration， 然后来到
<strong>Choose your platform</strong> 界面选择你使用的平台，如果没有对应的，就选择 <strong>Universal Code</strong>(通用) 。</p>

<p>然后，Disqus 就为你自动生成了一段代码，将这段代码贴到你的 site 上去，你就拥有了自己的评论系统。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="disqus_thread"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
</span><span class='line'>    var disqus_shortname = 'yoursitename'; // required: replace example with your forum shortname
</span><span class='line'>
</span><span class='line'>    /* * * DON'T EDIT BELOW THIS LINE * * */
</span><span class='line'>    (function() {
</span><span class='line'>        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
</span><span class='line'>        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
</span><span class='line'>        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
</span><span class='line'>    })();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</span><span class='line'>&lt;a href="http://disqus.com" class="dsq-brlink"&gt;comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>这段代码主要使用 <code>js</code> 来加载评论。如果你觉得还没有满足你的需求，你也可以考虑下<a href="http://help.disqus.com/customer/portal/articles/565624-tightening-your-disqus-integration">定制化</a></p>

<p>如下:</p>

<p><img src="http://SteveVallay.github.io/images/blog/disqus.png" alt="my app" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learn rails i18n]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/11/05/learn-rails-i18n/"/>
    <updated>2013-11-05T17:56:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/11/05/learn-rails-i18n</id>
    <content type="html"><![CDATA[<p>今天，学习了一下 Rails 的国际化，为 app 添加了中文翻译，非常简单。</p>

<!--more -->


<p>参考这个 <a href="http://railscasts.com/episodes/138-i18n?autoplay=true">Railscasts 视频</a> 和 <a href="http://guides.rubyonrails.org/i18n.html">Rails Guide</a>.下面结合添加 中文翻译，简单介绍一下。</p>

<p>每个平台都包含自己国际化的方式，比如 Android 平台，在 res 文件夹下， 会包含各种语言的字符串，放在特定名字的文件夹下，如 string, string-zh, string-en, string-fr 等等，应用开发者只要在 string-zh 下添加所需要的中文翻译，系统在中文环境下会自动加载 string-zh 下的字符串。</p>

<p>Rails 也有类似的机制，在 config/locales 下，默认只有 en.yml， 可以在这里添加多国语言的字符串来让 Rails app 支持多国语言版本。</p>

<h3>添加中文翻译文件</h3>

<p>首先在 config/locales 下 copy en.yml 成  zh.yml ，然后在 zh.yml 中添加字符 id 和 对应的字符内容。</p>

<p>如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zh:
</span><span class='line'>  user:
</span><span class='line'>    name: 用户名
</span><span class='line'>    email: 邮箱
</span><span class='line'>    password: 密码</span></code></pre></td></tr></table></div></figure>


<p>如果内容比较多，你可以分成不同的 namespace , 上面例子中，user 就是 zh 下面的一个 namespace， 你可以创建更多的层次， 引用的时候以 <code>.</code> 来引用就好了， 比如 user.name。</p>

<h3>在你的 code 中引用字符串 id</h3>

<p>支持多国的话，就要把 code 中 引用的字符串，改为字符 id 来引用。I18n 的 api  translate (t) 可以根据字符 id 来找到对应的字符串。</p>

<p>将直接引用字符串，改为使用 api 函数 t 来查找对应语言的字符串:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;%=</span> <span class="no">Create</span> <span class="no">New</span> <span class="no">User</span> <span class="sx">%&gt;&lt;/h2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;%=</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;user.new_user_reg&#39;</span><span class="p">)</span> <span class="sx">%&gt;&lt;/h2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>程序中配置你要使用的语言</h3>

<p>application_controller.rb 中添加 set_language 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_action</span> <span class="ss">:set_language</span>
</span><span class='line'>     <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">set_language</span>
</span><span class='line'>      <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="ss">:zh</span>
</span><span class='line'>     <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails add alert in bootstrap]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/10/28/rails-add-alert-in-bootstrap/"/>
    <updated>2013-10-28T22:12:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/10/28/rails-add-alert-in-bootstrap</id>
    <content type="html"><![CDATA[<p>今天,又给自己的小程序的 Notification 进行了下美化。让 Rails 应用的 Notification 使用 Bootstrap 样式的 <a href="http://getbootstrap.com/javascript/#alerts">Alert</a> (如下图)：</p>

<p><img src="http://SteveVallay.github.io/images/blog/alert.png" alt="alert" /></p>

<!-- more -->


<h3>Bootstrap 的 <code>alert</code></h3>

<p>首先,在 <code>Bootstrap</code> 中 ,只要为你要显示的内容指定 class 为 alert 即可显示成上面的样式（当然不包含 <code>x</code> 号)。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert alert-success&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert alert-info&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert alert-warning&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert alert-danger&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>alert-success</code> <code>alert-info</code> <code>alert-warning</code> <code>alert-danger</code> 会显示为绿色、蓝色、橙色和红色。效果如下：</p>

<p><img src="http://SteveVallay.github.io/images/blog/alerts.png" alt="alerts" /></p>

<h3>Rails 中 flash 的 key 映射到 Bootstrap alert 的 class</h3>

<p>在 Rails 中，通常是使用 flash 来设置给用户的消息。flash 是一个 map ， 它的 key 常有 :error, :alert ,:notice, :success 用来区分给用户的消息类型。在 view 中遍历 flash 这个 map 即可取到相应的消息。</p>

<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err"> </span><span class="o">&lt;</span><span class="sx">% flash.each </span><span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">msg</span><span class="o">|</span> <span class="o">-</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">      &lt;%= content_tag :div, msg, class: key %&gt;</span>
</span><span class='line'><span class="err">    </span><span class="o">&lt;</span><span class="sx">% end </span><span class="o">-%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常将 flash 这个 map 中的 key 设置为 html 元素的 class , 在对这个 class 进行 CSS 的定制化，即可显示处不同样式的 alert。但是 flash 中的 key 值似乎和 Bootstrap  alert 的 class 并不是一一对应，拿来就能用的。我们可以加一个方法来实现这种转化。在 application_helper 里面添加如下代码即可（在 Github gits 中看到的，一时要找不到了 ;&ndash;)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">bootstrap_class_for</span> <span class="n">flash_type</span>
</span><span class='line'>     <span class="k">case</span> <span class="n">flash_type</span>
</span><span class='line'>       <span class="k">when</span> <span class="ss">:success</span>
</span><span class='line'>         <span class="s2">&quot;alert-success&quot;</span>
</span><span class='line'>       <span class="k">when</span> <span class="ss">:error</span>
</span><span class='line'>         <span class="s2">&quot;alert-error&quot;</span>
</span><span class='line'>       <span class="k">when</span> <span class="ss">:alert</span>
</span><span class='line'>         <span class="s2">&quot;alert-block&quot;</span>
</span><span class='line'>       <span class="k">when</span> <span class="ss">:notice</span>
</span><span class='line'>         <span class="s2">&quot;alert-info&quot;</span>
</span><span class='line'>       <span class="k">else</span>
</span><span class='line'>         <span class="n">flash_type</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>view 中的代码改成如下即可 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">      </span><span class="o">&lt;%=</span> <span class="n">content_tag</span> <span class="ss">:div</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="n">bootstrap_class_for</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bootstrap alert 的 dismiss</h3>

<p>dismiss 的那个 <code>x</code> 需要结合 bootstrap 的 javascript 来完成。</p>

<p>在 alert 前面添加如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;close&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">dismiss</span><span class="o">=</span><span class="s2">&quot;alert&quot;</span><span class="o">&gt;&amp;</span><span class="n">times</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>application.js 加入 bootstrap的 js 和 dismiss 功能的 js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">bootstrap</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;.alert&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">alert</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了 ， OK 鸟 ！</p>

<p>效果如图：</p>

<p><img src="http://SteveVallay.github.io/images/blog/myalert.png" alt="myalert" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial Learning]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/09/24/rails-tutorial-learning/"/>
    <updated>2013-09-24T05:34:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/09/24/rails-tutorial-learning</id>
    <content type="html"><![CDATA[<p>最近终于读完了 <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book" title="online book">Ruby on Rails Tutorial</a> , 这是一本 <a href="http://rubyonrails.org/" title="official site">Ruby on Rails</a> 的入门书籍，这本书很适合从零开始的初学者。笔者也是最近才开始学习 <a href="http://rubyonrails.org/" title="official site">Ruby on Rails</a> 的，在看过了 <a href="http://guides.rubyonrails.org/" title="online guides">Ruby on Rails Guides</a> 中的 <a href="http://guides.rubyonrails.org/getting_started.html" title="Get started with Rails onlnie">Get Started with Rails</a>之后，开始学习此书的。</p>

<p>本书中的大部分内容在讲述如何一步一步的使用 <a href="http://rubyonrails.org/" title="official site">Ruby on Rails</a> 搭建一个简单版的 <a href="http://twitter.com">Twitter</a>，拥有基本功能：<code>Sign Up</code> , <code>Sign In/Out</code> , <code>发布 tweet</code> , <code>查看 tweet</code> , <code>Follow/unfollow  others</code>。虽然是功能很简单，但足以让你了解使用 <code>Ruby on Rails</code> 搭建一个完整的 <code>App</code> 所需要的东西。如果你也在学习 <a href="http://rubyonrails.org/" title="official site">Ruby on Rails</a> ,而且还没有读过 <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book" title="online book">Ruby on Rails Tutorial</a>，那么强烈推荐<a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book" title="online book">这本书</a>给你！(<strong>一定要注意版本哦!</strong>)</p>

<!--more-->


<p>下面来回顾一下每一章的内容，总结一下学到的东西。</p>

<p>第一章是基础知识介绍：</p>

<ul>
<li>开发环境：编辑器，安装 <code>Ruby</code> ， <code>Ruby Gems</code> ， <code>Rails</code> ， <code>Git</code> 。</li>
<li>创建第一个应用： <code>rails new</code> 创建 <code>app</code>， 介绍 <code>Bundle</code> ，启动 <code>rails server</code>， MVC模式。</li>
<li><code>Git/Github</code>： 使用 <a href="http://git-scm.com/">Git</a> 进行版本控制，将代码放到 <a href="http://github.coms">GitHub</a> 托管。</li>
<li><code>Heroku</code>：将 <code>app</code> 发布到 <a href="https://www.heroku.com/">Heroku</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crational Pattern - Sigleton]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/09/23/sigleton/"/>
    <updated>2013-09-23T13:54:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/09/23/sigleton</id>
    <content type="html"><![CDATA[<p>发现习惯 <a href="http://octopress.org">Octopress</a> 之后，就懒得再去照顾 <a href="http://enjoyhacking.com">Wordpress 博客</a> 了 ;&ndash;)。使用 <code>Octopress</code> 一个多月的时间，发觉使用这个轻量级的 <code>Framework</code> 写博客真是很舒服：</p>

<ul>
<li>简单的 <code>MarkDown</code> 语法，方便快速的处理基本的格式，比起处理 <code>HTML</code> 来要轻松多了。</li>
<li>托管使用 <a href="http://github.com">GitHub</a>, 免费，还不用担心服务器性能问题。自带版本控制。</li>
</ul>


<p>唯一的缺点可能是：你得在本地搭建一个环境，对于非程序员的一般用户来说，可能稍显复杂。</p>

<p>如果你也想搭建一个这样的博客，请参考<a href="http://stevevallay.github.io/blog/2013/08/15/blog-equals-octopress-plus-github-pages/">这里</a></p>

<p>继续<a href="http://enjoyhacking.com">这里</a> 学习 <code>Design Patterns</code>，今天来学习 <code>Singleton</code> 。</p>

<!--more-->


<p>又看了一遍 <a href="http://coolshell.cn/articles/8961.html">这篇文章</a>, 写的真是不错，<code>Design Patterns</code> 是从<a href="http://en.wikipedia.org/wiki/A_Pattern_Language">建筑领域</a>借鉴过来，解决软件设计中的问题。<code>GOF</code> 的 <code>Desgin Patterns</code>  中探讨了如何应用 Design Pattern 解决面向对象程序设计中的问题，如果我们能够不局限于此，从一般的软件设计和更加宽泛的角度来认识，或许能认识的更加深刻和独到。</p>

<h3>为什么使用 <code>Singleton</code> 模式</h3>

<p>使用 <code>Singleton</code> 是为了保证一个类只有一个实例，并且提供一个全局统一的接口来访问这个实例。</p>

<p>有很多情况下，需要保证一个类只有一个全局的实例：比如，全局的配置类需要保证有一个实例，这样才能保证所有使用的地方取到的配置是一致的；再比如，系统中管理窗口的类，也需要保证只有一个实例，这样才能保证窗口正确的排序和切换。</p>

<h3>如何实现 <code>Singleton</code></h3>

<p>如何保证一个类只有一个实例，而且是全局可以访问的？ 一个全局变量怎么样？虽然全局变量可以保证全局可以访问，但是不能保证只有一个实例。</p>

<p>让一个类自己来保证只有一个实例，提供一个全局统一的访问接口似乎是更合理的做法。因为是由这个类自己来响应创建实例和访问实例的请求。</p>

<p>来看一下这个结构图：</p>

<p><img src="http://SteveVallay.github.io/images/blog/singl014.gif" alt="single" /></p>

<p>从上图可以看出，这个类需要有一个唯一的实例 <code>uniqueInstance</code> , 以及一个可以访问这个实例的接口 <code>Instance()</code>。<code>singletonData</code> 是其他数据成员，<code>SingletonOperation</code> 和 <code>GetSingletonData</code> 是类的一般方法。</p>

<p>那么实现才能保证一个实例，全局访问呢？</p>

<p>Singleton 的声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'> <span class="k">class</span> <span class="nc">Singleton</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">Instance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">Singleton</span><span class="p">();</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义一个 <code>static</code> 方法 <code>Instance()</code> 保证全局统一访问；将构造函数 <code>Singleton（）</code>设置为
<code>protected</code> 使得外部无法调用此接口来创建新的实例，实现了自己控制实例的数量（此类或子类中），不受外部影响。</p>

<p>Singleton 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="n">Singleton</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">::</span><span class="n">_instance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Singleton</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">::</span><span class="n">Instance</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在返回 <code>Instance</code> 之前判断是否存在，如果不存在则创建这个实例，保证了实例只创建一次。</p>

<h2><code>Singleton</code> 的子类</h2>

<p>有时候可能 <code>Singleton</code> 需要满足不同的需求，因此需要几个不同的子类来是实现不同的需求，但是，如何保证运行时将正确的 <code>Instance</code> 绑定到 <code>_instance</code> 成员呢？</p>

<p>最简单的方法是在 <code>Instance()</code> 方法中根据配置来决定使用哪一个 <code>Singleton</code>。使用一种 <code>Registry</code> 和 <code>Lookup</code> 来决定使用哪个子类。</p>

<p>来看下新的 <code>Singleton</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Singleton</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="kt">void</span> <span class="n">Register</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">,</span> <span class="n">Singleton</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">Instance</span><span class="p">();</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">Lookup</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">Singleton</span><span class="o">*</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">NameSingletonPair</span><span class="o">&gt;*</span> <span class="n">_registry</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Register</code> 用来注册 <code>Singleton</code> 子类, 保存了一份 <code>Singleton</code> 子类的名字和实例 <code>map</code>，
<code>Lookup</code> 通过名字来找到正确的 <code>Singleton</code> 子类的实例。(假定名字是可以通过上下文环境来获取的)</p>

<p><code>Instance()</code> 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Singleton</span><span class="o">*</span> <span class="n">Singleton</span><span class="o">::</span><span class="n">Instance</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">singletonName</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;SINGLETON&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// user or environment supplies this at startup</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_instance</span> <span class="o">=</span> <span class="n">Lookup</span><span class="p">(</span><span class="n">singletonName</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Lookup returns 0 if there&#39;s no such singleton</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Singleton</code> 的子类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">MySingleton</span> <span class="n">theSingleton</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">MySingleton</span><span class="o">::</span><span class="n">MySingleton</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">Singleton</span><span class="o">::</span><span class="n">Register</span><span class="p">(</span><span class="s">&quot;MySingleton&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>android 中一个实现 <code>Singleton</code> 的例子</h3>

<p><em>WindowManagerGlobal.java</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">WindowManagerGlobal</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">WindowManagerGlobal</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sDefaultWindowManager</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sDefaultWindowManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WindowManagerGlobal</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sDefaultWindowManager</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[番茄工作法]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/09/10/tomato/"/>
    <updated>2013-09-10T10:14:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/09/10/tomato</id>
    <content type="html"><![CDATA[<p><img src="http://SteveVallay.github.io/images/blog/tomato-tech.png" alt="" /></p>

<!--more-->


<p>经常会遇到这样的情况：在忙碌了一天之后，发现 <strong>咦?一天结束了，可是怎么觉得什么都没干呢？</strong>
，回想一下自己一天工作的场景：</p>

<p>收邮件->回邮件->干会儿活A->收到新邮件->擦，新Bug->回复下->干会儿活?&ndash;>有人来问问题->过去看下->搞定->回来->看下邮件->休息下看看twitter->继续干活?&ndash;>fouban.fm换首歌->有新邮件->再干会儿活?&ndash;>看看github->有人IM找你->IM聊天&hellip;&ndash;>干活儿?&ndash;>有人电话你->新问题看下代码->回来干活?&ndash;>看邮件->干活?&ndash;>看邮件->看邮件->下班&hellip;&hellip;</p>

<p>真实的情况可能比上面更复杂，尤其是你有QQ提醒等等之类的东西的时候。我不知道别的公司怎么样，反正在我公司邮件是比较重要的，如果不及时回复很可能一会儿就会IM或者电话找你了。</p>

<p>自己反省可能有几个原因导致效率降低：</p>

<ul>
<li>缺少一天的计划。最好是每一天都有每一天的计划，而且关键要写下来。我们习惯于将各种计划都放在头脑中，导致同时想着太多的事情，不能专注。</li>
<li>不断被打断，使得自己很难持续一段时间专注在一件事情上。尤其是同时有几件任务并发的时候，做这件事情的时候又被那件事情的邮件干扰。虽然有些客观因素不可避免，但是只有强制自己少被其他事情干扰，才能专注地把事情做完。</li>
<li>事情的优先级没有安排好。俗话说<strong>人有旦夕祸福，事有轻重缓急</strong>，将事情按轻重缓急的优先级列出，使得自己一目了然，不用再在头脑思考切换，让头脑专注于具体的事情，不要让它再思考该做哪个，不该做哪个(当然我指定是不影响你做事的时间，事实上想清楚应该做什么是最重要的，我们第一应该做的就是花时间思考清楚这一点)。</li>
</ul>


<p>我在考虑如何提高自己效率的时候，偶然间，邂逅了 “番茄工作法”，使用 “番茄钟” 来提醒自己，在这25分钟（或者你自己设定的时间）要专注在当前的事情上，“番茄钟”没有响起，你不可以去干其他事情。下面就介绍一下，希望对你也有帮助。:&ndash;)</p>

<h3>什么是番茄工作法？</h3>

<blockquote><p>番茄工作法（Pomodoro Technique）由弗朗西斯科·西里洛于1992年创立的相对于<a href="http://www.baike.com/wiki/gtd&amp;prd=button_doc_jinru">GTD</a>更微观的时间管理方法。</p>

<p>他在大学生活的头几年，曾一度苦于学习效率低下，于是便和自己打赌，狠狠鄙视自己说：“我能学一会儿习吗？真正学上10分钟？”后来他找到了一枚厨房定时器，形状像西红柿（Pomodoro ，意大利语的“番茄”）。就这样，遇到了他的番茄钟。</p>

<p>所谓“番茄工作法”，指的是把任务分解成半小时左右，集中精力工作25分钟后休息5分钟，如此视作种一个“番茄”。哪怕工作没有完成，也要定时休息，然后再进入下一个番茄时间。收获4个“番茄”后，能休息15至30分钟。</p>

<p>这样的设定是考虑到，对庞大任务的恐惧和抗拒是导致拖延的重要原因，把注意力集中在“当下”，能帮助人更好地集中精力、摆脱过去失败的阴影和对“万一任务完不成”的焦虑。而种“番茄”期间的休息安排，这样的小小激励能使下一个30分钟更有动力。</p>

<p>&mdash;参考<a href="http://www.baike.com/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">互动百科</a></p></blockquote>

<h3>我如何应用番茄工作法</h3>

<p>要实践<strong>番茄工作法</strong>，首先你要有一个<strong>番茄钟</strong>,这个助手帮助你设定好时间，时间到了之后提醒你。我发现在 <code>Windows</code> 平台和 <code>Android</code> 平台都已经有这样的应用程序，不过尝试了一下，我都觉得不是很好用，直到我发现了一个 <a href="http://stevevallay.github.io/tomato/">web 版本</a>，它很好的解决了我在 windows（在公司) 和 linux(在家) 都要使用的需求。而且界面简单易用，代码在 <a href="https://github.com/">Github</a> 上,还可以自己修改。这个小程序是由腾讯的 <a href="https://github.com/AlloyTeam">Alloy Team</a> 用 <code>html</code> 和 <code>js</code> 写成的，我 <a href="https://github.com/SteveVallay/tomato">Fork 了一下</a> ，小改了一下，你可以<a href="http://stevevallay.github.io/tomato/">预览一下</a>。</p>

<p>界面非常简洁，使用 <code>bootstrap</code> <code>css</code>框架， 看起来很清秀。上图：</p>

<p><img src="http://SteveVallay.github.io/images/blog/tomato.png" alt="tomato" /></p>

<h3>番茄工作法带来的好处</h3>

<ul>
<li>帮助我梳理还有那些事情需要做</li>
<li>在一个番茄时间内专注做当下的事情</li>
<li>让我可以回顾自己做了哪些事情</li>
<li>帮助客观的了解自己的效率，比如（我统计出自己看书的速度大概是 8p/<code>half hour</code>）</li>
</ul>


<p>推荐你也尝试一下 ！ ;&ndash;)</p>

<p>推荐这本 <a href="http://pomodorotechnique.com/download/pdf/ThePomodoroTechnique-CHN_v1-3.pdf">中文书籍</a> ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using bootstrap in rails]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/09/04/using-bootstrap-in-rails/"/>
    <updated>2013-09-04T12:41:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/09/04/using-bootstrap-in-rails</id>
    <content type="html"><![CDATA[<p>本人 <code>rails</code> 新手，使用 <code>rails 4.0</code> ， 在 <code>rails</code> <code>app</code> 中添加 <a href="http://getbootstrap.com/" title="home page">Bootstrap</a> 支持, 参考 <code>Ruby on Rails tutorial 2nd edition En</code>。</p>

<!-- more -->


<h2>Step 1  添加 <a href="https://github.com/thomas-mcdonald/bootstrap-sass" title="github">bootstrap-sass</a> 到 <strong>Gemfile</strong></h2>

<p>打开 <strong>Gemfile</strong> 添加如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Use bootstrap</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;bootstrap-sass&#39;</span><span class="p">,</span><span class="s1">&#39;~&gt;2.3.2&#39;</span> <span class="c1">#tutorial 上用的是2.0.0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 2 安装</h2>

<p>直接运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 3 创建 <code>custom.css.scss</code></h2>

<p>创建 <code>custom.css.scss</code> 文件：</p>

<p><strong>app/assets/stylesheets/custom.css.scss</strong></p>

<p>在 <strong>app/assets/stylesheets</strong> 下的文件会自动被 <strong>application.css</strong> <code>include</code>进来。</p>

<p>在这个文件中可以添加 bootstrap CSS 进来，在 <code>custom.css.scss</code> 中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，还可以在<code>custom.css.sass</code>文件中添加自己的<code>custom</code> 如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">/*universal*/</span>
</span><span class='line'>
</span><span class='line'><span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">overflow-y</span><span class="o">:</span><span class="k">scroll</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">padding-top</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">padding-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails 4 using jquery]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/08/29/rails-4-using-jquery/"/>
    <updated>2013-08-29T12:40:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/08/29/rails-4-using-jquery</id>
    <content type="html"><![CDATA[<p>本人 rails 新手，在学习 <code>rails</code> (version 4.0.0） 程序的时候，需要用到 <code>javascript</code>，想使用现成的 <code>java script</code> 库，就想着把 <a href="http://jquery.com/">JQuery</a> 添加进来，并且要使用一个 <code>jquery</code> 的 <code>plugin</code> &mdash; <a href="http://jqueryvalidation.org/">jquery validation</a>。</p>

<!-- more -->


<h2>rails 怎么加入 jQuery ?</h2>

<p><a href="http://google.com">Google</a> 了很久，有很多 <code>rails 3</code> 如何添加使用 <code>jQuery</code> 的， <code>rails4</code> 的就没找到。后来，终于发现原来<strong>自 <code>rails 3.1</code> 之后，<code>rails</code> 已经包含了对 <code>jQuery</code>的支持</strong>。:&ndash;) <a href="https://github.com/rails/jquery-rails">jquery-rails</a> 这个 <code>gem</code> 就是 <code>rails</code> 对 <code>jQuery</code> 的支持， 查看 Gemfile , 如果已经包含了 <a href="https://github.com/rails/jquery-rails">jquery-rails</a> , 而且 <code>rails</code> 版本等于或高于 <code>rails3.1</code> 那就说明已经支持 jQuery 了。</p>

<p>具体请看 <a href="https://github.com/rails/jquery-rails">jquery-rails 的 github</a>。</p>

<p>查看 <code>Gemfile</code> :</p>

<p>如果有下面这一行，那么 <code>rails new app</code> 的时候会自动用 <code>bundle install</code> 安装 <code>jquery-rails</code>。</p>

<pre><code>gem "jquery-rails"
</code></pre>

<p>在 <code>app/assets/javascripts/application.js</code> 里面应该有下面这两句，这样 <code>application.js</code> 就自动包含了 <code>jquery.js</code> 和 <code>jquery_ujs.js</code> :</p>

<pre><code>//= require jquery
//= require jquery_ujs
</code></pre>

<h2>怎么测试我的 <code>rails</code> 已经包含了 <code>jQuery</code> ?</h2>

<p>有个简单的方法可以测试你的 rails 是否已经包含了对 jQuery的支持，首先，你要确保上面所说的 <code>Gemfile</code> 和 <code>application.js</code> 都如上所示。</p>

<p>新建一个 <code>rails app</code> (如果已经有了就不用新建了),新建个 <code>welcome#index</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="kp">new</span> <span class="n">my</span><span class="o">-</span><span class="n">app</span>
</span><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">controller</span> <span class="n">welcome</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动你的 <code>rails app</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">my</span><span class="o">-</span><span class="n">app</span>
</span><span class='line'><span class="n">rails</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开 <a href="http://localhost:3000/welcome/index">http://localhost:3000/welcome/index</a>, 右击页面，查看源代码,如果有了下面两行，应该是 <code>Ok</code> 了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">data-turbolinks-track=</span><span class="s">&quot;true&quot;</span> <span class="na">src=</span><span class="s">&quot;/assets/jquery.js?body=1&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">data-turbolinks-track=</span><span class="s">&quot;true&quot;</span> <span class="na">src=</span><span class="s">&quot;/assets/jquery_ujs.js?body=1&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加一段 <code>js</code> 代码测试 <code>jQuery</code></h2>

<p>当然，我们也可以加一段 <code>js</code> 代码来测试 <code>jQuery</code> 是否可以被正确的调用。</p>

<p>在 <code>app/assets/javascripts/application.js</code> 文件末尾添加如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;success!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>你再次打开 <a href="http://localhost:3000/welcome/index">http://localhost:3000/welcome/index</a> 的时候，会弹出一个  <code>success!</code> 的 <code>dialog</code>，那就说明成功了!</p>

<h2>添加 <code>jQuery</code> <code>Validation</code> <code>plugin</code></h2>

<p>下载 <a href="http://jqueryvalidation.org/">jQuery Validation</a>，把 <code>jquery.validate.min.js</code> 放在 <code>app/assets/javascripts</code> 下面就可以用了。</p>

<p>使用方法可以参考 <a href="http://sleekd.com/tutorials/jquery-validation-in-ruby-on-rails/">这个tutorials</a>，或者<a href="http://jqueryvalidation.org/documentation">官方文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署 Rails 程序到 Heroku]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/08/27/deploy-rails-app-on-heroku/"/>
    <updated>2013-08-27T17:26:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/08/27/deploy-rails-app-on-heroku</id>
    <content type="html"><![CDATA[<h2>什么是 Heroku ?</h2>

<p><a href="https://www.heroku.com/">Heroku</a> 是一个 <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">Saas</a> (云应用平台)，用户可以将自己的 web 程序部署到 <a href="https://www.heroku.com/">Heroku</a> 云主机上。使用简单的命令就可以部署你的程序到 <a href="https://www.heroku.com/">Heroku</a>。 <a href="https://www.heroku.com/">Heroku</a> 使用 <a href="http://git-scm.com/">Git</a> 作为版本控制工具。<a href="https://www.heroku.com/">Heroku</a> 目前支持 <a href="http://www.ruby-lang.org/en/">Ruby</a>， <a href="http://nodejs.org/">Node.js</a>，<a href="http://clojure.org/">Clojure</a>，Java，<a href="http://www.python.org/">Python</a>，<a href="http://www.scala-lang.org/">Scala</a>。默认数据库是 <a href="http://www.postgresql.org/">PostgreSQL</a>。</p>

<blockquote><p>Build. Deploy. Scale. Heroku brings them together
in an experience built and designed for developers.
– Larry Marburger, CloudApp</p></blockquote>

<p>想要部署你的程序到 <a href="https://www.heroku.com/">Heroku</a>？</p>

<p>Let&rsquo;s Go !</p>

<!-- more -->


<h2>Step 1：创建账户</h2>

<p>你需要先创建一个 Heroku的账户，如果你已经有了，直接看 Step 2.</p>

<p><a href="https://api.heroku.com/signup/devcenter" title="创建 Heroku 账户">点此创建 Heroku 账户</a></p>

<h2>Step 2： 安装 Heroku Toolbelt</h2>

<p><code>Linux</code> 用户请查看 <a href="https://toolbelt.heroku.com/debian" title="install heroku toolbet linux">安装 Heroku toolbelt</a> , 或直接执行下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>我在执行的时候发现非常的慢，就在浏览器打开了上面这个<a href="https://toolbelt.heroku.com/install-ubuntu.sh" title="https://toolbelt.heroku.com/install-ubuntu.sh">URL</a> 然后，保存下来，手动执行了一下。</p>

<p>我还修改了一行,
将:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y heroku-toolbelt</span></code></pre></td></tr></table></div></figure>


<p>改为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y --force-yes heroku-toolbelt</span></code></pre></td></tr></table></div></figure>


<h2>Step 3: 登录</h2>

<p>安装好之后，就可用命令行登录 heroku:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku login
</span><span class='line'>Enter your Heroku credentials.
</span><span class='line'>Email: adam@example.com
</span><span class='line'>Password:
</span><span class='line'>Could not find an existing public key.
</span><span class='line'>Would you like to generate one? <span class="o">[</span>Yn<span class="o">]</span>
</span><span class='line'>Generating new SSH public key.
</span><span class='line'>Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<h2>Step 4: 准备好自己的程序</h2>

<p>一切就绪，你需要准备好自己的程序。</p>

<p>由于 Heroku上 使用的是 PostgreSQL ， 所以我们需要修改下Gemfile。</p>

<p>将:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>确保你的 app 已经纳入 Git 版本控制之中，如果没有请执行:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s2">&quot;initial commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 5： 部署程序到 Heroku</h2>

<p>下面该上传你的 app 到 Heroku 了:</p>

<p>创建 Heroku App:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku create
</span><span class='line'>Creating stark-fog-398... <span class="k">done</span>, stack is cedar
</span><span class='line'>http://stark-fog-398.herokuapp.com/ | git@heroku.com:stark-fog-398.git
</span><span class='line'>Git remote heroku added
</span></code></pre></td></tr></table></div></figure>


<p><code>push</code> 代码到 Heroku：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push heroku master
</span><span class='line'>Counting objects: 67, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>52/52<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>67/67<span class="o">)</span>, 86.33 KiB, <span class="k">done</span>.
</span><span class='line'>Total 67 <span class="o">(</span>delta 5<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>-----&gt; Heroku receiving push
</span><span class='line'>-----&gt; Rails app detected
</span><span class='line'>-----&gt; Installing dependencies using Bundler version 1.1
</span><span class='line'>       Checking <span class="k">for </span>unresolved dependencies.
</span><span class='line'>       Unresolved dependencies detected.
</span><span class='line'>       Running: bundle install --without development:test --path vendor/bundle --deployment
</span><span class='line'>       Fetching <span class="nb">source </span>index <span class="k">for </span>https://rubygems.org/
</span><span class='line'>       Installing rake <span class="o">(</span>0.8.7<span class="o">)</span>
</span><span class='line'>       ...
</span><span class='line'>       Installing rails <span class="o">(</span>3.0.5<span class="o">)</span>
</span><span class='line'>       Your bundle is <span class="nb">complete</span>! It was installed into ./vendor/bundle
</span><span class='line'>-----&gt; Rails plugin injection
</span><span class='line'>       Injecting rails_log_stdout
</span><span class='line'>       Injecting rails3_serve_static_assets
</span><span class='line'>-----&gt; Discovering process types
</span><span class='line'>       Procfile declares types -&gt; <span class="o">(</span>none<span class="o">)</span>
</span><span class='line'>       Default types <span class="k">for </span>Rails -&gt; console, rake, web, worker
</span><span class='line'>-----&gt; Compiled slug size is 8.3MB
</span><span class='line'>-----&gt; Launching... <span class="k">done</span>, v5
</span><span class='line'>       http://severe-mountain-793.herokuapp.com deployed to Heroku
</span><span class='line'>
</span><span class='line'>To git@heroku.com:severe-mountain-793.git
</span><span class='line'> * <span class="o">[</span>new branch<span class="o">]</span>      master -&gt; master
</span></code></pre></td></tr></table></div></figure>


<p>如果这一步时间很长，或者返回 <code>Timeout</code> , 而且你在 China ，那可能遇到 <a href="http://ruby-china.org/topics/10813">这个问题</a> 了。</p>

<p><code>Note:</code>
不要使用 <code>rails new yourapp</code> 新建一个 app 来测试 Heroku, 至少你也得建个 <code>welcome#index</code>
来测试吧。</p>

<p><a href="http://enjoyhacking.heroku.com">这里</a> 是我用来测试的 rails app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown usage]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/08/15/markdown/"/>
    <updated>2013-08-15T11:15:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/08/15/markdown</id>
    <content type="html"><![CDATA[<h3>什么是 markdown ?</h3>

<p>随着 <a href="https://github.com">Github</a> 的流行，markdown 渐渐获得了人们的青睐，当作一种更便于读写的格式流行起来. github 默认支持 markdown格式的文件，例如这个 <a href="https://github.com/SteveVallay/stevevallay.github.com/blob/source/README.markdown">README.markdown</a> 文件，在github 上展示的时候会被直接解析成漂亮的格式。</p>

<p>随后，<a href="http://pages.github.com/">github page</a> 的出现可以使你可以在 github 上搭建一个免费博客，使用 markdown 语法。</p>

<p>再然后，出现了<a href="http://jekyllrb.com/">jekyllrb</a> 和 <a href="http://octopress.org/">Octopress</a>  这种基于 <a href="http://pages.github.com/">github page</a> 和 markdown 的 Blog 框架，使人们摆脱 wordpress 的臃肿，不必担心找不到托管服务器,使用简单的 markdown 语法即可快速撰写和发布博客。(当前这个 blog 正是使用 <a href="http://octopress.org/">Octopress</a> + <a href="http://pages.github.com/">github page</a> 搭建的博客)</p>

<p>简单的说，markdown 是一种轻量级的标记语言，它的目标是易读易写，使用 markdown 书写的格式可被 markdown 解析器转换成格式良好的 html/xhtml 文件。</p>

<p>markdown 包含两层含义，一层是 markdown 语法；另外一层是解析 markdown 语法文件的软件。</p>

<p>一些介绍 markdown 语法的资源：</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/">markdown 作者博客</a></li>
<li><a href="http://zh.wikipedia.org/wiki/Markdown">中文 wiki</a></li>
<li><a href="http://en.wikipedia.org/wiki/Markdown">英文 wiki</a></li>
<li><a href="http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版)</a></li>
</ul>


<!-- more -->


<h3>谁使用 markdown ?</h3>

<p>列举几个著名的：</p>

<ul>
<li><a href="https://github.com">Github</a></li>
<li><a href="http://pages.github.com/">Github pages</a></li>
<li><a href="https://gist.github.com/">Github Gist</a></li>
<li><a href="http://stackoverflow.com/">Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/editing-help">StackOverflow edit help</a></li>
</ul>


<h3>mark down 语法 Example</h3>

<h4>标题</h4>

<p>使用任意数量的 <code>===</code>  表示一级标题，<code>----</code> 表示二级标题。</p>

<p>如：</p>

<pre><code>一级标题
===========

二级标题
--------
</code></pre>

<p>也可以采用在行首插入 <code>#</code> 的格式，行首插入 1-6 个 <code>#</code> ，对应1级到6级标题</p>

<pre><code>#一级标题
##二级标题
###三级标题
</code></pre>

<h3>块引用</h3>

<p>在每行的行首加入 <code>&gt;</code> 可建立一个块引用</p>

<p>如：</p>

<pre><code>&gt;Stay hungry, stay foolish !
</code></pre>

<p>显示效果：</p>

<blockquote><p>Stay hungry, stay foolish !</p></blockquote>

<p>在块引用内部也支持 markdown 标记，多级引用： 比如：</p>

<pre><code>&gt;###Title
&gt;some code
&gt;
&gt;    sudo make me a sandwitch
&gt;&gt;二级引用
</code></pre>

<p>显示效果：</p>

<blockquote><h3>Title</h3>

<p>some code</p>

<pre><code>sudo make me a sandwidth
</code></pre>

<blockquote><p>二级引用</p></blockquote></blockquote>

<h3>强调</h3>

<p>markdown 使用 <code>*</code> 和 <code>_</code> 来表示强调，被一个或多个 <code>*</code> <code>_</code> 包围的字句会被显示为强调。</p>

<p>如：</p>

<pre><code>*one*
_one_
**two**
__two__
***three***
___three___
</code></pre>

<p>显示效果：</p>

<p><em>one</em>
<em>one</em>
<strong>two</strong>
<strong>two</strong>
<strong><em>three</em></strong>
<strong><em>three</em></strong></p>

<h3>列表</h3>

<p>markdown 支持无序列表和有序列表。</p>

<p>在行首使用  <code>*</code>, <code>+</code> 或者 <code>-</code> 加一个空格作为无序列表标记。</p>

<p>如：</p>

<pre><code>* ul 1
* ul 2
* ul 3
</code></pre>

<p>显示效果：</p>

<ul>
<li>ul 1</li>
<li>ul 2</li>
<li>ul 3</li>
</ul>


<p>有序列表使用数字和一个英文句点 <code>.</code> 加一个空格。</p>

<p>如：</p>

<pre><code> 1. ol 1
 2. ol 2
 3. ol 3
</code></pre>

<p>显示效果：</p>

<ol>
<li>ol 1</li>
<li>ol 2</li>
<li>ol 3</li>
</ol>


<h3>链接</h3>

<p>markdown 支持两种链接：<strong>行内</strong>和<strong>参考</strong>两种形式。</p>

<p><strong>行内</strong>链接的写法：将链接文字用 <code>[]</code> 括起来，链接地址用 <code>()</code> 括起来。</p>

<p>如：</p>

<pre><code>[My Blog](http://stevevallay.github.io)
</code></pre>

<p>显示效果:</p>

<p><a href="http://stevevallay.github.io">My Blog</a></p>

<p><strong>参考</strong>链接与<strong>行内</strong>链接不同，参考链接将链接地址放在另外的地方（一般集中放在页面下方),用数字来引用：</p>

<p>如：</p>

<pre><code>[My Blog][100]
[100]:http://stevevallay.github.io
</code></pre>

<p>显示效果：</p>

<p><a href="http://stevevallay.github.io">My Blog</a></p>

<h3>引用代码</h3>

<p>在句子中，可以使用反引号(<code>`</code>）标记一小段代码。</p>

<p>如：</p>

<pre><code>get bash help from `man bash`
</code></pre>

<p>显示效果：</p>

<p>get help from <code>man bash</code></p>

<p>插入一段多行程序代码，使用多个反引号开头和结尾。</p>

<p>如：</p>

<pre><code>```
sudo make me a sandwich
eat it
```
</code></pre>

<p>显示效果：(这里的显示效果可能有些不同，因为这里使用了 Octopress 的 <a href="http://octopress.org/docs/plugins/backtick-codeblock/">Backtick Code Block </a> 插件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo make me a sandwich
</span><span class='line'>eat it</span></code></pre></td></tr></table></div></figure>


<h3>图片</h3>

<p>markdown 使用和链接类似的语法来插入图片，同样也有两种样式：<strong>行内</strong>和<strong>参考</strong>。</p>

<p><strong>行内</strong>引用:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   ![Image Description](/image/path/aa.img)</span></code></pre></td></tr></table></div></figure>


<p>显示效果：</p>

<p><img src="http://SteveVallay.github.io/images/blog/create_a_repo.png" alt="Example Image" /></p>

<p><strong>参考</strong>引用:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![示例图片][101]
</span><span class='line'>[101]:/images/blog/create_a_repo.png</span></code></pre></td></tr></table></div></figure>


<p>显示效果：</p>

<p><img src="http://SteveVallay.github.io/images/blog/create_a_repo.png" alt="示例图片" /></p>

<h3>注脚</h3>

<p>注脚和链接类似，只是编号使用一个 <code>^</code>符号开头，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  footnote example[^1]
</span><span class='line'>  
</span><span class='line'>  [^1]:this is a footnote</span></code></pre></td></tr></table></div></figure>


<p>显示效果</p>

<p>this is a fotnote<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h3>转义</h3>

<p>markdown 语法中特殊意义的字符输入的时候要用反斜杠<code>\</code>来转义。</p>

<p>如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\  反斜杠
</span><span class='line'>`  反引号
</span><span class='line'>*  星号
</span><span class='line'>_  底线
</span><span class='line'>{} 花括号
</span><span class='line'>[] 方括号
</span><span class='line'>() 括弧
</span><span class='line'>#  井字号
</span><span class='line'>+  加号
</span><span class='line'>-  减号
</span><span class='line'>.  英文句点
</span><span class='line'>!  惊叹号</span></code></pre></td></tr></table></div></figure>


<h3>Markdown 编辑器</h3>

<p><code>Windows</code> 下我使用 <a href="http://markdownpad.com/">MarkdownPad</a> 作为 markdown 编辑器。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>this is a footnote<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog = octopress + github pages]]></title>
    <link href="http://SteveVallay.github.io/blog/2013/08/15/blog-equals-octopress-plus-github-pages/"/>
    <updated>2013-08-15T10:44:00+08:00</updated>
    <id>http://SteveVallay.github.io/blog/2013/08/15/blog-equals-octopress-plus-github-pages</id>
    <content type="html"><![CDATA[<p>Thanks to github , we have another choice to setup a blog beyond the popluar wordpress, <a href="http://page.github.com">github pages</a> +  <a href="http://octopress.org">octopress</a> (based on <a href="http://jekyllrb.com">jekyll</a>, simply we can say : octopress is jekyll + themes).</p>

<p>Using octopress we can setup a blog very easy , the most import is that the blog is host at <a href="http://github.com">github</a>:</p>

<ul>
<li>it is free!</li>
<li>version control !</li>
<li>without bandwith limit !</li>
<li>without storage space limit!</li>
<li>keep as long as you wish !</li>
</ul>


<p><em>Let&rsquo;s go &hellip;</em></p>

<!--more-->


<h3>Step1: setup your project on <a href="http://github.com">github</a>.</h3>

<p>first , you need a <a href="http://github.com">github</a> account , if you do not have one , please apply one on <a href="http://github.com">github</a></p>

<p>second ,you need create a new repository  with your name , assume your github account name is <strong>yourname</strong> , you need create your project with the name <strong>yourname.github.io</strong> or <strong>yourname.github.com</strong> .</p>

<h3>Step2: <a href="http://octopress.org/docs/setup">Setup Octopress</a></h3>

<p>assume you are working on uinx or linux, you alredy have <a href="http://git-scm.com">git</a> installed.</p>

<p>then , <a href="http://octopress.org/docs/setup/rvm">install ruby with rvm</a> or <a href="http://octopress.org/docs/setup/rbenv">install ruby with Rbenv</a> , use  rvm for example :</p>

<p>run the following command from terminal to get rvm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>install ruby 1.9.3 or later <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rvm</span> <span class="n">install</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'><span class="err">$</span> <span class="n">rvm</span> <span class="n">use</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'><span class="err">$</span> <span class="n">rvm</span> <span class="n">rubygems</span> <span class="n">latest</span>
</span></code></pre></td></tr></table></div></figure>


<p>get octopress from github:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes)</span>
</span><span class='line'><span class="nv">$ </span>ruby --version  <span class="c"># Should report Ruby 1.9.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>install dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">bundler</span>
</span><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>install the default theme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you met some error when using <code>rake install</code>, please try <code>bundle exec rake install</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> .</p>

<h3>Step3: <a href="http://octopress.org/docs/deploying/githug">deploy to github pages</a></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">setup_github_pages</span> <span class="c1">#input your repo name as git@github.com://yourname/yourname.github.io(com).git</span>
</span></code></pre></td></tr></table></div></figure>


<p>this command will do a couple things for you:</p>

<ul>
<li>Ask you for your github pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from ‘origin’ to ‘octopress’</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog’s url according to your repository.</li>
<li>Set up a master branch for your project in the _deploy directory, ready for deployment.</li>
</ul>


<p>Next run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$rake</span> <span class="n">generate</span>
</span><span class='line'><span class="vg">$rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>this will generate the content of your blog under _deploy directory and push it to master(gh-pages) branch ,
a few minites later, you can view your blog at <strong>yourname.github.io(com)</strong></p>

<h3>Step4: <a href="http://octopress.org/docs/configuring">Configure Octopress</a></h3>

<p>open _config.yml, change the config as you like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">url</span><span class="p">:</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//s</span><span class="n">tevevallay</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span>
</span><span class='line'><span class="ss">title</span><span class="p">:</span> <span class="no">Zhibin</span><span class="s1">&#39;s blog</span>
</span><span class='line'><span class="s1">subtitle: alway&#39;</span><span class="n">s</span> <span class="n">smile</span> <span class="ss">:-</span><span class="p">)</span>
</span><span class='line'><span class="ss">author</span><span class="p">:</span> <span class="n">zhibin</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step5: <a href="http://octopress.org/odcs/blogging">Blogging</a></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">new_post</span><span class="o">[</span><span class="s1">&#39;blog title&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>then, it will generate a file <em>source/_post/YYYY-MM-DD-XXXX.markdown</em> , this is the blog source , you can edit it with <a href="http://http://daringfireball.net/projects/markdown/">markdown</a> , if you havn&rsquo;t familiar with <em>markdown</em> , refer <a href="http://en.wikipedia.org/wiki/Markdown">markdown wiki</a> or  <a href="http://wowubuntu.com/markdown">markdown in Chinese</a></p>

<h3>Step6: Generate &amp; Preview</h3>

<p>after finish one post , you can preview it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">generate</span>  <span class="c1">#Generates posts and pages into the public directory</span>
</span><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">watch</span>      <span class="c1"># Watches source/ and sass/ for changes and regenerates</span>
</span><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">preview</span>    <span class="c1"># Watches, and mounts a webserver at http://localhost:4000</span>
</span></code></pre></td></tr></table></div></figure>


<p>open browser <a href="http://localhost:4000">http://localhost:4000</a> you can see your blog.</p>

<p><em>Do not</em> forget two things :</p>

<ul>
<li>Commit sources of your blog to github , from your local source branch to source branch in github.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;blog = github pages + octopress&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Deploy your blog, this will generate all files under_deploy and commit it to github master(gh-pages) branch.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally , you will get a similar blog as current <a href="http://stevevallay.github.io">stevevallay.github.io</a></p>

<h3><a href="http://http://octopress.org/docs/plugins/">Octopress Plugin</a></h3>

<p>the first octopress plugin i recommanded is <a href="http://octopress.org/docs/plugins/backtick-codeblock/">backtick code block</a> , it can help
add line number and syntax hightlight, octopress default installed it under plugin directory.
Simple you can use it as following:</p>

<p><strong>Syntax</strong></p>

<pre><code>``` [language] [title] [url] [line text]
    code snipt
```
</code></pre>

<p><strong>Example</strong></p>

<pre><code>``` bash
    $ sudo make me a sandwich
```
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo make me a sandwich
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://disqus.com">Disqus</a></h3>

<p><code>Disqus</code> is a blog comment hosting service for websites and online communities that uses a networked platform.</p>

<p>Octopress already have support for Disqus, to add <code>Disqus</code> comments to your Octopress:</p>

<ol>
<li>You need <a href="https://disqus.com/profile/signup/">Sign up</a> an account of <code>Disqus</code> if you do not have one.</li>
<li><a href="https://disqus.com/admin/signup/?utm_source=New-Site">Register your site to Disqus</a>, input <code>Site URL</code> , <code>Site Name</code> and <code>Site ShortName</code>(remember this , it is used in step 3).</li>
<li>Modify the <code>_config.yml</code> under your octopress directory as following (add your <code>Site ShortName</code> and set <code>disqus_show_comment_count</code> as true).</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Disqus Comments</span>
</span><span class='line'><span class="n">disqus_short_name</span><span class="p">:</span> <span class="n">zhibin</span> <span class="c1">#this is the `Site ShortName` you input in step 2</span>
</span><span class='line'><span class="n">disqus_show_comment_count</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>我使用的是 <code>1.9.3p448</code>,我在帮朋友 <a href="dabing1022.github.com">大兵</a> 安装 <code>Octopress</code> 的时候使用的是 <code>2.0.0</code> ，运行 <code>rake preview</code> 等命令的时候遇到一些版本相关的错误，使用 <code>bundle exec rake xxxx</code> 才可正常。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><code>bundle exec command</code> means <em>Execute a command in the context of the bundle</em>.使用 <code>bundle exec</code> 执行命令可以保证使用 <code>Gemfile</code> 中匹配的 <code>gem</code> 版本。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
